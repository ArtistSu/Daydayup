import java.time.Duration

plugins {
    id 'java'
    id 'application'
}

group = 'com.artists'
version = '1.0-SNAPSHOT'

mainClassName = 'com.artists.Main'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

def map = new HashMap<String, Object>()
map.put("action", { println("task_1 action in map()") })

task(map, "task_1", {
    //This will run during the task configuration section
    println("This is a simple task.")

    // The following will run during the task execution section
    doFirst {
        println("task_1 doFirst()")
    }
    doLast {
        println("task_1 doLast()")
    }
})

task_1.doFirst {
    println("task_1 doFirst() outer")
}

task_1.doLast {
    println("task_1 doLast() outer")
}

// Task Dependencies
task A {
    doLast {
        println "This is TaskA"
    }
}

task B {
    doLast {
        println "This is TaskB"
    }
}

task C(dependsOn: ['A', 'B']) {
    doLast {
        println "This is TaskC"
    }
}

task C_2 {
    dependsOn = ['A', 'B']
    doLast {
        println "This is Task C_2"
    }
}

task C_3 {
    doLast {
        println "This is Task C_3"
    }
}
C_3.dependsOn = ['A', 'B']

task cross_project_task_2 {
    dependsOn(":sub-project01:cross_project_task")
    doLast {
        println "This is task in gradle-root"
    }
}

// Task Group
task D {
    group "Self Definition Task"
    doLast {
        println "This is taskD"
    }
}

/**
 * There are 2 ways to create tasks
 * 1. Use task() We already use this way
 * e.g. task cross_project_task_2
 * task("cross_project_task_2")
 *
 * 2. Use tasks.register() or tasks.create()
 */
tasks.create("E") {
    doLast {
        println("This is taskE")
    }
}

// register() is delayed creation, tasks will only be created
// when needed
tasks.register("f") {
    doLast {
        println("This is taskF")
    }
}

task(group: "artists", description: "This is internal definition of task properties", "G")
task "H" {
    group("artists")
    description("This is another way to set task properties of task H")
}
task "I" {}
I.group = "artists"
D.group("artists") // Task D belongs to Self Definition Task, we will move it to artists

/**
 * Task type
 * Reference: https://docs.gradle.org/current/dsl/
 */

// Recursively delete all build files
tasks.register("myClean", Delete) {
    for (i in subprojects) {
        delete i.layout.buildDirectory
    }
    delete layout.buildDirectory
}

// Customise Task
class CustomTask extends DefaultTask {
    @TaskAction
    def doSelf() {
        println "This is doSelf() in MyTask"
    }
}

// def myTask = task MyDefinitionTask(type: CustomTask)
def myTask = tasks.create("MyTask", CustomTask)
myTask.doFirst() {
    println "This is doFirst() in MyTask"
}

myTask.doLast() {
    println "This is doLast() in MyTask"
}

/**
 * Dynamically assign tasks
 * After you define a task, you can use it directly
 */
4.times { counter ->
    tasks.register("task${counter}"){
        doLast {
            println "This is task ${counter}"
        }
    }
}
tasks.named('task0'){dependsOn('task2','task3')}

/**
 * Closing and opening tasks
 * 1. Internal set enable(false), false means the task will be skipped.
 * 2. Outer set [task name].enabled = false, false means the task will be skipped.
 */

task disableTask{
    doLast{
        println "This task is disable task"
    }
    enabled(false) // The default is true
}
//disableTask.enabled=false

/**
 * Timeout Task
 */
task timeoutTask_1 {
    doLast{
        Thread.sleep(1000)
        println "This is task timeoutTask_1"
    }
    timeout= Duration.ofMillis(500)
}

task timeoutTask_2 {
    doLast{
        println "This is task timeoutTask_2"
    }
}