import java.time.Duration

plugins {
    id 'java'
    id 'application'
}

group = 'com.artists'
version = '1.0-SNAPSHOT'

mainClassName = 'com.artists.Main'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

def map = new HashMap<String, Object>()
map.put("action", { println("task_1 action in map()") })

task(map, "task_1", {
    //This will run during the task configuration section
    println("This is a simple task.")

    // The following will run during the task execution section
    doFirst {
        println("task_1 doFirst()")
    }
    doLast {
        println("task_1 doLast()")
    }
})

task_1.doFirst {
    println("task_1 doFirst() outer")
}

task_1.doLast {
    println("task_1 doLast() outer")
}

// Task Dependencies
task A {
    doLast {
        println "This is TaskA"
    }
}

task B {
    doLast {
        println "This is TaskB"
    }
}

task C(dependsOn: ['A', 'B']) {
    doLast {
        println "This is TaskC"
    }
}

task C_2 {
    dependsOn = ['A', 'B']
    doLast {
        println "This is Task C_2"
    }
}

task C_3 {
    doLast {
        println "This is Task C_3"
    }
}
C_3.dependsOn = ['A', 'B']

task cross_project_task_2 {
    dependsOn(":sub-project01:cross_project_task")
    doLast {
        println "This is task in gradle-root"
    }
}

// Task Group
task D {
    group "Self Definition Task"
    doLast {
        println "This is taskD"
    }
}

/**
 * There are 2 ways to create tasks
 * 1. Use task() We already use this way
 * e.g. task cross_project_task_2
 * task("cross_project_task_2")
 *
 * 2. Use tasks.register() or tasks.create()
 */
tasks.create("E") {
    doLast {
        println("This is taskE")
    }
}

// register() is delayed creation, tasks will only be created
// when needed
tasks.register("f") {
    doLast {
        println("This is taskF")
    }
}

task(group: "artists", description: "This is internal definition of task properties", "G")
task "H" {
    group("artists")
    description("This is another way to set task properties of task H")
}
task "I" {}
I.group = "artists"
D.group("artists") // Task D belongs to Self Definition Task, we will move it to artists

/**
 * Task type
 * Reference: https://docs.gradle.org/current/dsl/
 */

// Recursively delete all build files
tasks.register("myClean", Delete) {
    for (i in subprojects) {
        delete i.layout.buildDirectory
    }
    delete layout.buildDirectory
}

// Customise Task
class CustomTask extends DefaultTask {
    @TaskAction
    def doSelf() {
        println "This is doSelf() in MyTask"
    }
}

// def myTask = task MyDefinitionTask(type: CustomTask)
def myTask = tasks.create("MyTask", CustomTask)
myTask.doFirst() {
    println "This is doFirst() in MyTask"
}

myTask.doLast() {
    println "This is doLast() in MyTask"
}

/**
 * Dynamically assign tasks
 * After you define a task, you can use it directly
 */
4.times { counter ->
    tasks.register("task${counter}"){
        doLast {
            println "This is task ${counter}"
        }
    }
}
tasks.named('task0'){dependsOn('task2','task3')}

/**
 * Closing and opening tasks
 * 1. Internal set enable(false), false means the task will be skipped.
 * 2. Outer set [task name].enabled = false, false means the task will be skipped.
 */

task disableTask{
    doLast{
        println "This task is disable task"
    }
    enabled(false) // The default is true
}
//disableTask.enabled=false

/**
 * Timeout Task
 */
task timeoutTask_1 {
    doLast{
        Thread.sleep(1000)
        println "This is task timeoutTask_1"
    }
    timeout= Duration.ofMillis(500)
}

task timeoutTask_2 {
    doLast{
        println "This is task timeoutTask_2"
    }
}

/**
 * Find task
 */
task findTask{
    doLast {
        println "This is a task about finding task."
    }
}

tasks.findByName("findTask").doFirst {println "Add doFirst() before findTask byName"}
tasks.getByName("findTask").doFirst {println "Add doFirst() before findTask getName"}
tasks.findByPath(":findTask").doFirst {println "Add doFirst() before findTask byPath"}
tasks.getByPath(":findTask").doFirst {println "Add doFirst() before findTask getPath"}

/**
 * Task doesn't exist
 * If you run gradle abc taskExist -> report an error in normal
 * For now it will print the hint, addRule([Description], Closure)
 * The given rule is invoked when an unknown object is requested by name.
 * The abc is the unknown object.
 */
task "taskExist"{
    doLast {
        println "This is taskExist."
    }
}

//tasks.addRule("[Description of rule]",{
//    def taskName -> task(taskName){
//        println "The unknow object is ${taskName}"
//    }
//})

/**
 * onlyIf
 * Before you test, please ensure the line 231-235 comment out
 * first. Why? We can only use 248, and 249 to add a property
 * to the project. Task is a property of the project object as
 * well.
 */
task "onlyIfTask" {

    doLast {
        println "This is onlyIfTask."
    }
}
ext.propertyExist=true
ext {
    propertyExist_2=true
}
onlyIfTask.onlyIf {project.hasProperty("propertyExist")}

task "propertyExist_3" { println "100% task is a property of the project object"}
onlyIfTask.onlyIf {project.hasProperty("propertyExist_3")}

/**
 * Default task
 */
task defaultTask{
    doLast {
        println "This is default task"
    }
}

task nonDefaultTask{
    doLast {
        println "This is non-default task"
    }
}
defaultTasks 'defaultTask'

/**
 * Local File Operation
 */
// Relative Path
File relative = file('src/relativePath.xml')
relative.createNewFile()

// Absolute Path
File absolute = file('C:\\GitRepository\\Daydayup\\Gradle\\gradle-root\\src\\absolutePath.xml')
absolute.createNewFile()

// New File
File newFile = new File('src/newFile.xml')
newFile.createNewFile()

/**
 * File Collection
 */
FileCollection fileCollection = files('src/fileCollection_1.xml',['src/fileCollection_2.xml','src/fileCollection_3.xml'])
fileCollection.forEach {
    item -> {
        println(item.name)
        item.createNewFile()
    }
}

// Convert fileCollection to Set
Set filesSet = fileCollection.files
for (def i in filesSet){
    println "fileSet " + i.exists()
}

Set fileSet_2 = fileCollection as Set
for (def i in fileSet_2){
    println "fileSet_2 " +i.exists()
}

// Convert fileCollection to List
Set fileList = fileCollection as List

// Add or remove file of fileCollection
def addFile  = fileCollection + files('src/fileCollection_4.xml')
def removeFile = fileCollection - files('src/fileCollection_4.xml')

addFile.forEach { File item -> {
    println "AddFile " + item.name
}}

/**
 * File Tree
 * 1. Use path to create file tree object
 * 2. Use closure to create file tree object
 * 3. Use path and closure to create file tree
 */
ConfigurableFileTree configurableFileTree = fileTree('src/main')
configurableFileTree.forEach (item->{
    println "File tree - ${item.name}"
})

// Exclude Main.java -> It won't print anything
configurableFileTree.exclude("**/*.java").forEach (item->{
    println "File tree exclude - ${item.name}"
})

// 2. Use closure to create file tree
def tree = fileTree('src/main').include("**/*.java")
tree.forEach (item -> {println "Use closure to create file tree  - ${item.name}"})

// 3. Use path and closure to create file tree
tree = fileTree(dir: 'src/main',include:'**/*.java')
tree = fileTree(dir: 'src/main',includes:['**/*.java','**/*.xml'],exclude: '**/*Txt*/**')

/**
 * File Copy
 * from([file path])
 * into([directory path])
 * 1. If file path is a directory -> copy all files in this directory
 * 2. If file path is a file -> copy this file
 * 3. If file path is a zip -> copy file in this zip
 */
task copyTasks(type:Copy){
        // Copy files in the folder. If the folder doesn't exist, it will be ignored.
        from 'src/main/webapp'
        // Copy a specific file
        from 'src/main/java/com/artists/TestCopyFile.csv'
        // Copy from zip
        from zipTree('src/main/TestZip.zip')
        // Copy files to target directory
        into 'build/copyFile'
    //into this.buildDir.absolutePath
}

// only copy .csv file
task copyTasks_2(type:Copy){
    from 'src/main/java/com/artists/TestCopyFile.csv'
    from zipTree('src/main/TestZip.zip')
    include('**/*.csv')
    // exclude('**/*.csv')
    into 'build/copyFile_2'
}

// rename the file
task copyTasks_3(type:Copy){
    from 'src/main/java/com/artists/TestCopyFile.csv'
    rename { def fileName ->
        fileName.replace('CopyFile','CopyFile_3')

    }
    into 'build/copyFile_3'
}

// copy()
task copyTasks_4  {
    copy {
        from 'src/main/java/com/artists/TestCopyFile.csv'
        into 'build/copyFile_4'
    }
}

// define input & output outside
task copyTasks_5  {
    inputs.file 'src/main/java/com/artists/TestCopyFile.csv'
    outputs.dir 'build/copyFile_5'
    doLast{
        copy {
            from 'src/main/java/com/artists/TestCopyFile.csv'
            into 'build/copyFile_5'
        }
    }
}
